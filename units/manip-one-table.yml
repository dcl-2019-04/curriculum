title: Other single-table verbs
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\nYou’ve learned the most important verbs for data analysis: `filter()`,\n`mutate()`,
  `group_by()` and `summarize()`. There are a number of other\nverbs that are not
  quite as important but still come in handy from\ntime-to-time. The goal of this
  document is to familiarise you with their\npurpose and basic operation\n\n``` r\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n\n##
  Select\n\nMost of the datasets you’ll work with in this class only have a\nrelatively
  small number of variables, and generally you don’t need to\nreduce further. In real
  life, you’ll sometimes encounter datasets with\nhundreds or even thousands of variables,
  and the first challenge is just\nto narrow down to a useful subset. Solving that
  problem is the job of\n`select()`.\n\n`select()` allows you to work with column
  names using a handful of\nhelper functions:\n\n  - `starts_with(\"x\")` and `ends_with(\"x\")`
  select variables that start\n    with a common prefix or end with a common suffix.\n\n
  \ - `contains(\"x\")` selects variables that contain a phrase.\n    `matches(\"x.y\")`
  select all variables that match a given regular\n    expression (which you’ll learn
  about later in the course).\n\n  - `a:e` selects all variables from variable `a`
  to variable `e`\n    inclsive.\n\nYou can also select a single varible just by using
  its name directly.\n\n``` r\nflights %>% \n  select(year:day, ends_with(\"delay\"))\n#>
  # A tibble: 336,776 x 5\n#>     year month   day dep_delay arr_delay\n#>    <int>
  <int> <int>     <dbl>     <dbl>\n#>  1  2013     1     1         2        11\n#>
  \ 2  2013     1     1         4        20\n#>  3  2013     1     1         2        33\n#>
  \ 4  2013     1     1        -1       -18\n#>  5  2013     1     1        -6       -25\n#>
  \ 6  2013     1     1        -4        12\n#>  7  2013     1     1        -5        19\n#>
  \ 8  2013     1     1        -3       -14\n#>  9  2013     1     1        -3        -8\n#>
  10  2013     1     1        -2         8\n#> # … with 336,766 more rows\n```\n\nTo
  remove variables from selection, put a `-` in front of the\nexpression.\n\n``` r\nflights
  %>% \n  select(-starts_with(\"dep\"))\n#> # A tibble: 336,776 x 17\n#>     year
  month   day sched_dep_time arr_time sched_arr_time arr_delay\n#>    <int> <int>
  <int>          <int>    <int>          <int>     <dbl>\n#>  1  2013     1     1
  \           515      830            819        11\n#>  2  2013     1     1            529
  \     850            830        20\n#>  3  2013     1     1            540      923
  \           850        33\n#>  4  2013     1     1            545     1004           1022
  \      -18\n#>  5  2013     1     1            600      812            837       -25\n#>
  \ 6  2013     1     1            558      740            728        12\n#>  7  2013
  \    1     1            600      913            854        19\n#>  8  2013     1
  \    1            600      709            723       -14\n#>  9  2013     1     1
  \           600      838            846        -8\n#> 10  2013     1     1            600
  \     753            745         8\n#> # … with 336,766 more rows, and 10 more variables:
  carrier <chr>,\n#> #   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time
  <dbl>,\n#> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\nThere’s
  one last helper that’s useful if you just want to move a few\nvariables to the start:
  `everything()`.\n\n``` r\nflights %>% \n  select(dep_delay, arr_delay, everything())\n#>
  # A tibble: 336,776 x 19\n#>    dep_delay arr_delay  year month   day dep_time sched_dep_time
  arr_time\n#>        <dbl>     <dbl> <int> <int> <int>    <int>          <int>    <int>\n#>
  \ 1         2        11  2013     1     1      517            515      830\n#>  2
  \        4        20  2013     1     1      533            529      850\n#>  3         2
  \       33  2013     1     1      542            540      923\n#>  4        -1       -18
  \ 2013     1     1      544            545     1004\n#>  5        -6       -25  2013
  \    1     1      554            600      812\n#>  6        -4        12  2013     1
  \    1      554            558      740\n#>  7        -5        19  2013     1     1
  \     555            600      913\n#>  8        -3       -14  2013     1     1      557
  \           600      709\n#>  9        -3        -8  2013     1     1      557            600
  \     838\n#> 10        -2         8  2013     1     1      558            600      753\n#>
  # … with 336,766 more rows, and 11 more variables: sched_arr_time <int>,\n#> #   carrier
  <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#> #   air_time <dbl>,
  distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour <dttm>\n```\n\n## Rename\n\nTo
  change the name of a variable use `df %>% rename(new_name =\nold_name)`. If you
  have trouble remembering which sides old and new go\non, remember it’s the same
  order as `mutate()`.\n\n``` r\nflights %>% \n  rename(tail_num = tailnum)\n#> #
  A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay
  arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  \ 1  2013     1     1      517            515         2      830\n#>  2  2013     1
  \    1      533            529         4      850\n#>  3  2013     1     1      542
  \           540         2      923\n#>  4  2013     1     1      544            545
  \       -1     1004\n#>  5  2013     1     1      554            600        -6      812\n#>
  \ 6  2013     1     1      554            558        -4      740\n#>  7  2013     1
  \    1      555            600        -5      913\n#>  8  2013     1     1      557
  \           600        -3      709\n#>  9  2013     1     1      557            600
  \       -3      838\n#> 10  2013     1     1      558            600        -2      753\n#>
  # … with 336,766 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tail_num <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n\nIf
  you’re selecting and renaming, note that you can also use `select()`\nto rename.
  This sometimes allows you to save a step.\n\n``` r\nflights %>% \n  select(year:day,
  tail_num = tailnum)\n#> # A tibble: 336,776 x 4\n#>     year month   day tail_num\n#>
  \   <int> <int> <int> <chr>   \n#>  1  2013     1     1 N14228  \n#>  2  2013     1
  \    1 N24211  \n#>  3  2013     1     1 N619AA  \n#>  4  2013     1     1 N804JB
  \ \n#>  5  2013     1     1 N668DN  \n#>  6  2013     1     1 N39463  \n#>  7  2013
  \    1     1 N516JB  \n#>  8  2013     1     1 N829AS  \n#>  9  2013     1     1
  N593JB  \n#> 10  2013     1     1 N3ALAA  \n#> # … with 336,766 more rows\n```\n\n##
  Transmute\n\nTransmute is a minor variation of `mutate()`. The main difference is\nthat
  it drops any variables that you didn’t explicitly mention. It’s a\nuseful shortcut
  for `mutate()` + `select()`.\n\n``` r\ndf <- tibble(x = 1:3, y = 3:1)\n\n# mutate()
  keeps all the variables\ndf %>% \n  mutate(z = x + y)\n#> # A tibble: 3 x 3\n#>
  \      x     y     z\n#>   <int> <int> <int>\n#> 1     1     3     4\n#> 2     2
  \    2     4\n#> 3     3     1     4\n\n# transmute() drops all the variables\ndf
  %>% \n  transmute(z = x + y)\n#> # A tibble: 3 x 1\n#>       z\n#>   <int>\n#> 1
  \    4\n#> 2     4\n#> 3     4\n```\n\n## Arrange\n\n`arrange()` lets you change
  the order of the rows. To put a column in\ndescending order, use `desc()`.\n\n```
  r\nflights %>% \n  arrange(desc(dep_delay))\n#> # A tibble: 336,776 x 19\n#>     year
  month   day dep_time sched_dep_time dep_delay arr_time\n#>    <int> <int> <int>
  \   <int>          <int>     <dbl>    <int>\n#>  1  2013     1     9      641            900
  \     1301     1242\n#>  2  2013     6    15     1432           1935      1137     1607\n#>
  \ 3  2013     1    10     1121           1635      1126     1239\n#>  4  2013     9
  \   20     1139           1845      1014     1457\n#>  5  2013     7    22      845
  \          1600      1005     1044\n#>  6  2013     4    10     1100           1900
  \      960     1342\n#>  7  2013     3    17     2321            810       911      135\n#>
  \ 8  2013     6    27      959           1900       899     1236\n#>  9  2013     7
  \   22     2257            759       898      121\n#> 10  2013    12     5      756
  \          1700       896     1058\n#> # … with 336,766 more rows, and 12 more variables:
  sched_arr_time <int>,\n#> #   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum
  <chr>,\n#> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#>
  #   minute <dbl>, time_hour <dttm>\n\nflights %>% \n  arrange(year, month, day)\n#>
  # A tibble: 336,776 x 19\n#>     year month   day dep_time sched_dep_time dep_delay
  arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  \ 1  2013     1     1      517            515         2      830\n#>  2  2013     1
  \    1      533            529         4      850\n#>  3  2013     1     1      542
  \           540         2      923\n#>  4  2013     1     1      544            545
  \       -1     1004\n#>  5  2013     1     1      554            600        -6      812\n#>
  \ 6  2013     1     1      554            558        -4      740\n#>  7  2013     1
  \    1      555            600        -5      913\n#>  8  2013     1     1      557
  \           600        -3      709\n#>  9  2013     1     1      557            600
  \       -3      838\n#> 10  2013     1     1      558            600        -2      753\n#>
  # … with 336,766 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n\n##
  Distinct\n\n`distinct()` removes duplicates from a dataset. The result is ordered
  by\nfirst occurence in original dataset.\n\n``` r\nflights %>% \n  distinct(carrier,
  flight)\n#> # A tibble: 5,725 x 2\n#>    carrier flight\n#>    <chr>    <int>\n#>
  \ 1 UA        1545\n#>  2 UA        1714\n#>  3 AA        1141\n#>  4 B6         725\n#>
  \ 5 DL         461\n#>  6 UA        1696\n#>  7 B6         507\n#>  8 EV        5708\n#>
  \ 9 B6          79\n#> 10 AA         301\n#> # … with 5,715 more rows\n```\n\n##
  Sample\n\nWhen working with very large datasets, sometimes it’s convenient to\nreduce
  to a smaller dataset, just by taking a random sample. That’s the\njob of `sample_n()`
  and `sample_frac()`. `sample_n()` selects the same\nnumber of observations from
  each group, `sample_frac()` selects the same\nproportion.\n\n``` r\npopular_dest
  <- \n  flights %>%\n  group_by(dest) %>%\n  filter(n() > 1000)\n\n# Creates a dataset
  with the same number of flights to each dest\npopular_dest %>% \n  sample_n(100)\n#>
  # A tibble: 5,800 x 19\n#> # Groups:   dest [58]\n#>     year month   day dep_time
  sched_dep_time dep_delay arr_time\n#>    <int> <int> <int>    <int>          <int>
  \    <dbl>    <int>\n#>  1  2013     8    28     1105           1100         5     1349\n#>
  \ 2  2013     4    29      713            720        -7      950\n#>  3  2013    10
  \   12      556            600        -4      758\n#>  4  2013     3    14     1823
  \          1700        83     2034\n#>  5  2013     7     7     1824           1800
  \       24     2119\n#>  6  2013    10    30     1748           1738        10     2001\n#>
  \ 7  2013    10    18     2002           1930        32     2223\n#>  8  2013     9
  \   29      625            630        -5      839\n#>  9  2013     1    13     1158
  \          1200        -2     1415\n#> 10  2013     9     3     1320           1215
  \       65     1532\n#> # … with 5,790 more rows, and 12 more variables: sched_arr_time
  <int>,\n#> #   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#>
  #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #
  \  minute <dbl>, time_hour <dttm>\n\n# Creates a dataset with proportion number
  of flights to each dest\npopular_dest %>% \n  sample_frac(0.01)\n#> # A tibble:
  3,205 x 19\n#> # Groups:   dest [58]\n#>     year month   day dep_time sched_dep_time
  dep_delay arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  \ 1  2013     4    19     1854           1817        37     2131\n#>  2  2013     8
  \   13      600            600         0      851\n#>  3  2013    10    17      553
  \           600        -7      821\n#>  4  2013     8    28     1614           1459
  \       75     1821\n#>  5  2013     7    31     1500           1459         1     1735\n#>
  \ 6  2013     6    20     1259           1259         0     1520\n#>  7  2013     6
  \   17      803            759         4     1017\n#>  8  2013    12     3      613
  \           615        -2      848\n#>  9  2013     9    21     1055           1100
  \       -5     1317\n#> 10  2013    12     4      957           1000        -3     1228\n#>
  # … with 3,195 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n\n##
  Slice rows\n\n`slice()` allows to pick rows by position, by group. `head()` and\n`tail()`
  just show the first (or last) few rows of the entire data\nframe.\n\n``` r\n# first
  flights to each dest\nflights %>% \n  group_by(dest) %>%\n  slice(1:5)\n#> # A tibble:
  517 x 19\n#> # Groups:   dest [105]\n#>     year month   day dep_time sched_dep_time
  dep_delay arr_time\n#>    <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  \ 1  2013    10     1     1955           2001        -6     2213\n#>  2  2013    10
  \    2     2010           2001         9     2230\n#>  3  2013    10     3     1955
  \          2001        -6     2232\n#>  4  2013    10     4     2017           2001
  \       16     2304\n#>  5  2013    10     5     1959           1959         0     2226\n#>
  \ 6  2013    10     1     1149           1159       -10     1245\n#>  7  2013    10
  \    2     1152           1159        -7     1259\n#>  8  2013    10     3     1211
  \          1159        12     1316\n#>  9  2013    10     4      757            800
  \       -3      859\n#> 10  2013    10     4     1154           1159        -5     1258\n#>
  # … with 507 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n\n#
  first flights overall\nflights %>% \n  head()\n#> # A tibble: 6 x 19\n#>    year
  month   day dep_time sched_dep_time dep_delay arr_time\n#>   <int> <int> <int>    <int>
  \         <int>     <dbl>    <int>\n#> 1  2013     1     1      517            515
  \        2      830\n#> 2  2013     1     1      533            529         4      850\n#>
  3  2013     1     1      542            540         2      923\n#> 4  2013     1
  \    1      544            545        -1     1004\n#> 5  2013     1     1      554
  \           600        -6      812\n#> 6  2013     1     1      554            558
  \       -4      740\n#> # … with 12 more variables: sched_arr_time <int>, arr_delay
  <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#>
  #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#> #   time_hour
  <dttm>\n\n# last flights overall\nflights %>% \n  tail()\n#> # A tibble: 6 x 19\n#>
  \   year month   day dep_time sched_dep_time dep_delay arr_time\n#>   <int> <int>
  <int>    <int>          <int>     <dbl>    <int>\n#> 1  2013     9    30       NA
  \          1842        NA       NA\n#> 2  2013     9    30       NA           1455
  \       NA       NA\n#> 3  2013     9    30       NA           2200        NA       NA\n#>
  4  2013     9    30       NA           1210        NA       NA\n#> 5  2013     9
  \   30       NA           1159        NA       NA\n#> 6  2013     9    30       NA
  \           840        NA       NA\n#> # … with 12 more variables: sched_arr_time
  <int>, arr_delay <dbl>,\n#> #   carrier <chr>, flight <int>, tailnum <chr>, origin
  <chr>, dest <chr>,\n#> #   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#>
  #   time_hour <dttm>\n```\n"
